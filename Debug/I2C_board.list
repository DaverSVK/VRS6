
I2C_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001228  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080013b0  080013b0  000113b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013c8  080013c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080013c8  080013c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013c8  080013c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013c8  080013c8  000113c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013cc  080013cc  000113cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080013d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003fc5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000129d  00000000  00000000  00023ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c8  00000000  00000000  00025298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000510  00000000  00000000  00025860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154aa  00000000  00000000  00025d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000055f1  00000000  00000000  0003b21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070b52  00000000  00000000  0004080b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b135d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015e8  00000000  00000000  000b13b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001398 	.word	0x08001398

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001398 	.word	0x08001398

080001c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	695a      	ldr	r2, [r3, #20]
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80001fc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000200:	f7ff ffe2 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000204:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000208:	f7ff ffde 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800020c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000210:	f7ff ffda 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>

}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800026c:	f023 0306 	bic.w	r3, r3, #6
 8000270:	68b9      	ldr	r1, [r7, #8]
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	430a      	orrs	r2, r1
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	60da      	str	r2, [r3, #12]
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr

08000288 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	60da      	str	r2, [r3, #12]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	605a      	str	r2, [r3, #4]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <LL_AHB1_GRP1_EnableClock>:
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d2:	695a      	ldr	r2, [r3, #20]
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4313      	orrs	r3, r2
 80002da:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4013      	ands	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002e6:	68fb      	ldr	r3, [r7, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000302:	69da      	ldr	r2, [r3, #28]
 8000304:	4907      	ldr	r1, [pc, #28]	; (8000324 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4313      	orrs	r3, r2
 800030a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <LL_APB1_GRP1_EnableClock+0x2c>)
 800030e:	69da      	ldr	r2, [r3, #28]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4013      	ands	r3, r2
 8000314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000316:	68fb      	ldr	r3, [r7, #12]
}
 8000318:	bf00      	nop
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000

08000328 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08e      	sub	sp, #56	; 0x38
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800032e:	f107 031c 	add.w	r3, r7, #28
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]
 800033e:	615a      	str	r2, [r3, #20]
 8000340:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
 8000350:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000352:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000356:	f7ff ffb7 	bl	80002c8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800035a:	23c0      	movs	r3, #192	; 0xc0
 800035c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800035e:	2302      	movs	r3, #2
 8000360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000362:	2303      	movs	r3, #3
 8000364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000366:	2301      	movs	r3, #1
 8000368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800036e:	2304      	movs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4818      	ldr	r0, [pc, #96]	; (80003d8 <MX_I2C1_Init+0xb0>)
 8000378:	f000 fbde 	bl	8000b38 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800037c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000380:	f7ff ffba 	bl	80002f8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000384:	4815      	ldr	r0, [pc, #84]	; (80003dc <MX_I2C1_Init+0xb4>)
 8000386:	f7ff ff8f 	bl	80002a8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800038a:	4814      	ldr	r0, [pc, #80]	; (80003dc <MX_I2C1_Init+0xb4>)
 800038c:	f7ff ff7c 	bl	8000288 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000390:	4812      	ldr	r0, [pc, #72]	; (80003dc <MX_I2C1_Init+0xb4>)
 8000392:	f7ff ff51 	bl	8000238 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000396:	4811      	ldr	r0, [pc, #68]	; (80003dc <MX_I2C1_Init+0xb4>)
 8000398:	f7ff ff3e 	bl	8000218 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_I2C1_Init+0xb8>)
 80003a2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80003b0:	2300      	movs	r3, #0
 80003b2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80003b4:	2300      	movs	r3, #0
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80003b8:	f107 031c 	add.w	r3, r7, #28
 80003bc:	4619      	mov	r1, r3
 80003be:	4807      	ldr	r0, [pc, #28]	; (80003dc <MX_I2C1_Init+0xb4>)
 80003c0:	f000 fccd 	bl	8000d5e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_I2C1_Init+0xb4>)
 80003ca:	f7ff ff45 	bl	8000258 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	3738      	adds	r7, #56	; 0x38
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	48000400 	.word	0x48000400
 80003dc:	40005400 	.word	0x40005400
 80003e0:	2000090e 	.word	0x2000090e

080003e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f003 0307 	and.w	r3, r3, #7
 80003f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <__NVIC_SetPriorityGrouping+0x44>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003fa:	68ba      	ldr	r2, [r7, #8]
 80003fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000400:	4013      	ands	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800040c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <__NVIC_SetPriorityGrouping+0x44>)
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	60d3      	str	r3, [r2, #12]
}
 800041c:	bf00      	nop
 800041e:	3714      	adds	r7, #20
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <LL_RCC_HSI_Enable+0x1c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <LL_RCC_HSI_Enable+0x1c>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000

0800044c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <LL_RCC_HSI_IsReady+0x20>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	2b02      	cmp	r3, #2
 800045a:	bf0c      	ite	eq
 800045c:	2301      	moveq	r3, #1
 800045e:	2300      	movne	r3, #0
 8000460:	b2db      	uxtb	r3, r3
}
 8000462:	4618      	mov	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	00db      	lsls	r3, r3, #3
 8000484:	4904      	ldr	r1, [pc, #16]	; (8000498 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000486:	4313      	orrs	r3, r2
 8000488:	600b      	str	r3, [r1, #0]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <LL_RCC_SetSysClkSource+0x24>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f023 0203 	bic.w	r2, r3, #3
 80004ac:	4904      	ldr	r1, [pc, #16]	; (80004c0 <LL_RCC_SetSysClkSource+0x24>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	604b      	str	r3, [r1, #4]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <LL_RCC_GetSysClkSource+0x18>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <LL_RCC_SetAHBPrescaler+0x24>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <LL_RCC_SetAHBPrescaler+0x24>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	604b      	str	r3, [r1, #4]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000518:	4904      	ldr	r1, [pc, #16]	; (800052c <LL_RCC_SetAPB1Prescaler+0x24>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	604b      	str	r3, [r1, #4]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_RCC_SetAPB2Prescaler+0x24>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	604b      	str	r3, [r1, #4]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <LL_RCC_SetI2CClockSource+0x2c>)
 8000562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	0e1b      	lsrs	r3, r3, #24
 8000568:	43db      	mvns	r3, r3
 800056a:	401a      	ands	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000572:	4904      	ldr	r1, [pc, #16]	; (8000584 <LL_RCC_SetI2CClockSource+0x2c>)
 8000574:	4313      	orrs	r3, r2
 8000576:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000

08000588 <LL_APB1_GRP1_EnableClock>:
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000592:	69da      	ldr	r2, [r3, #28]
 8000594:	4907      	ldr	r1, [pc, #28]	; (80005b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800059e:	69da      	ldr	r2, [r3, #28]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4013      	ands	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005c2:	699a      	ldr	r2, [r3, #24]
 80005c4:	4907      	ldr	r1, [pc, #28]	; (80005e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <LL_FLASH_SetLatency+0x24>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f023 0207 	bic.w	r2, r3, #7
 80005f8:	4904      	ldr	r1, [pc, #16]	; (800060c <LL_FLASH_SetLatency+0x24>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	600b      	str	r3, [r1, #0]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40022000 	.word	0x40022000

08000610 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <LL_FLASH_GetLatency+0x18>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0307 	and.w	r3, r3, #7
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff ffc1 	bl	80005b8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000636:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800063a:	f7ff ffa5 	bl	8000588 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f7ff fed0 	bl	80003e4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f808 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff fdd6 	bl	80001f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f8f2 	bl	8000834 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000650:	f7ff fe6a 	bl	8000328 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x28>
	...

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ffc3 	bl	80005e8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000662:	bf00      	nop
 8000664:	f7ff ffd4 	bl	8000610 <LL_FLASH_GetLatency>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1fa      	bne.n	8000664 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800066e:	f7ff fedd 	bl	800042c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000672:	bf00      	nop
 8000674:	f7ff feea 	bl	800044c <LL_RCC_HSI_IsReady>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d1fa      	bne.n	8000674 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800067e:	2010      	movs	r0, #16
 8000680:	f7ff fef6 	bl	8000470 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff2b 	bl	80004e0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff3c 	bl	8000508 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff4d 	bl	8000530 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff00 	bl	800049c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800069c:	bf00      	nop
 800069e:	f7ff ff11 	bl	80004c4 <LL_RCC_GetSysClkSource>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1fa      	bne.n	800069e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <SystemClock_Config+0x68>)
 80006aa:	f000 fe33 	bl	8001314 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SystemClock_Config+0x68>)
 80006b0:	f000 fe3e 	bl	8001330 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80006b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006b8:	f7ff ff4e 	bl	8000558 <LL_RCC_SetI2CClockSource>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	007a1200 	.word	0x007a1200

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <MemManage_Handler+0x4>

080006d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler+0x4>

080006dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <UsageFault_Handler+0x4>

080006e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SystemInit+0x20>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <SystemInit+0x20>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <LL_AHB1_GRP1_EnableClock>:
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4013      	ands	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40021000 	.word	0x40021000

08000770 <LL_APB1_GRP1_EnableClock>:
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <LL_APB1_GRP1_EnableClock+0x2c>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <LL_APB1_GRP1_EnableClock+0x2c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f043 0201 	orr.w	r2, r3, #1
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	609a      	str	r2, [r3, #8]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3308      	adds	r3, #8
 80007f8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	e853 3f00 	ldrex	r3, [r3]
 8000800:	60bb      	str	r3, [r7, #8]
   return(result);
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3308      	adds	r3, #8
 800080e:	69fa      	ldr	r2, [r7, #28]
 8000810:	61ba      	str	r2, [r7, #24]
 8000812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000814:	6979      	ldr	r1, [r7, #20]
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	e841 2300 	strex	r3, r2, [r1]
 800081c:	613b      	str	r3, [r7, #16]
   return(result);
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1e7      	bne.n	80007f4 <LL_USART_DisableIT_CTS+0x8>
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800085e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000862:	f7ff ff85 	bl	8000770 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000866:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800086a:	f7ff ff69 	bl	8000740 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800086e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000874:	2302      	movs	r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000884:	2307      	movs	r3, #7
 8000886:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f000 f952 	bl	8000b38 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000894:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000898:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80008a6:	230c      	movs	r3, #12
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_USART2_UART_Init+0xa4>)
 80008ba:	f000 fca5 	bl	8001208 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0xa4>)
 80008c0:	f7ff ff94 	bl	80007ec <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_USART2_UART_Init+0xa4>)
 80008c6:	f7ff ff7b 	bl	80007c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <MX_USART2_UART_Init+0xa4>)
 80008cc:	f7ff ff68 	bl	80007a0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3738      	adds	r7, #56	; 0x38
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff ff1c 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f000 fd21 	bl	8001350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fe8d 	bl	800062c <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000914:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000920:	080013d0 	.word	0x080013d0
  ldr r2, =_sbss
 8000924:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000928:	20000020 	.word	0x20000020

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>

0800092e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800092e:	b480      	push	{r7}
 8000930:	b089      	sub	sp, #36	; 0x24
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	fa93 f3a3 	rbit	r3, r3
 8000948:	613b      	str	r3, [r7, #16]
  return result;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2103      	movs	r1, #3
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	401a      	ands	r2, r3
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	fa93 f3a3 	rbit	r3, r3
 8000968:	61bb      	str	r3, [r7, #24]
  return result;
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	fab3 f383 	clz	r3, r3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	431a      	orrs	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	3724      	adds	r7, #36	; 0x24
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	43db      	mvns	r3, r3
 80009a0:	401a      	ands	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	fb01 f303 	mul.w	r3, r1, r3
 80009aa:	431a      	orrs	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	605a      	str	r2, [r3, #4]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa93 f3a3 	rbit	r3, r3
 80009d6:	613b      	str	r3, [r7, #16]
  return result;
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	fab3 f383 	clz	r3, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2103      	movs	r1, #3
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	401a      	ands	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	fa93 f3a3 	rbit	r3, r3
 80009f6:	61bb      	str	r3, [r7, #24]
  return result;
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fab3 f383 	clz	r3, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000a0e:	bf00      	nop
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b089      	sub	sp, #36	; 0x24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	fa93 f3a3 	rbit	r3, r3
 8000a34:	613b      	str	r3, [r7, #16]
  return result;
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fab3 f383 	clz	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2103      	movs	r1, #3
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	401a      	ands	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	fa93 f3a3 	rbit	r3, r3
 8000a54:	61bb      	str	r3, [r7, #24]
  return result;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	fab3 f383 	clz	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	431a      	orrs	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	60da      	str	r2, [r3, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3724      	adds	r7, #36	; 0x24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6a1a      	ldr	r2, [r3, #32]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa93 f3a3 	rbit	r3, r3
 8000a92:	613b      	str	r3, [r7, #16]
  return result;
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	fab3 f383 	clz	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	fa93 f3a3 	rbit	r3, r3
 8000ab2:	61bb      	str	r3, [r7, #24]
  return result;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fab3 f383 	clz	r3, r3
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000aca:	bf00      	nop
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b089      	sub	sp, #36	; 0x24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa93 f3a3 	rbit	r3, r3
 8000af2:	613b      	str	r3, [r7, #16]
  return result;
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	fab3 f383 	clz	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	210f      	movs	r1, #15
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	401a      	ands	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	fa93 f3a3 	rbit	r3, r3
 8000b14:	61bb      	str	r3, [r7, #24]
  return result;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	fab3 f383 	clz	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	431a      	orrs	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000b2c:	bf00      	nop
 8000b2e:	3724      	adds	r7, #36	; 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa93 f3a3 	rbit	r3, r3
 8000b4e:	613b      	str	r3, [r7, #16]
  return result;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	fab3 f383 	clz	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000b5a:	e051      	b.n	8000c00 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d043      	beq.n	8000bfa <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d003      	beq.n	8000b82 <LL_GPIO_Init+0x4a>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d10e      	bne.n	8000ba0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	461a      	mov	r2, r3
 8000b88:	69b9      	ldr	r1, [r7, #24]
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff16 	bl	80009bc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fef6 	bl	800098c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	69b9      	ldr	r1, [r7, #24]
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff36 	bl	8000a1a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d11a      	bne.n	8000bec <LL_GPIO_Init+0xb4>
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	60bb      	str	r3, [r7, #8]
  return result;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000bc4:	fab3 f383 	clz	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b07      	cmp	r3, #7
 8000bcc:	d807      	bhi.n	8000bde <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	69b9      	ldr	r1, [r7, #24]
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff4e 	bl	8000a78 <LL_GPIO_SetAFPin_0_7>
 8000bdc:	e006      	b.n	8000bec <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	461a      	mov	r2, r3
 8000be4:	69b9      	ldr	r1, [r7, #24]
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff75 	bl	8000ad6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	69b9      	ldr	r1, [r7, #24]
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fe9a 	bl	800092e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1a6      	bne.n	8000b5c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <LL_I2C_Enable>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f043 0201 	orr.w	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_I2C_Disable>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 0201 	bic.w	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_I2C_ConfigFilters>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	0219      	lsls	r1, r3, #8
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	430b      	orrs	r3, r1
 8000c74:	431a      	orrs	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	601a      	str	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_I2C_SetOwnAddress1>:
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c9a:	f023 0307 	bic.w	r3, r3, #7
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	609a      	str	r2, [r3, #8]
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <LL_I2C_EnableOwnAddress1>:
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_I2C_DisableOwnAddress1>:
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_I2C_SetTiming>:
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	611a      	str	r2, [r3, #16]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_I2C_SetMode>:
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	605a      	str	r2, [r3, #4]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff65 	bl	8000c38 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	6899      	ldr	r1, [r3, #8]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	461a      	mov	r2, r3
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff6d 	bl	8000c58 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffb6 	bl	8000cf6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff44 	bl	8000c18 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ffa0 	bl	8000cd6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6919      	ldr	r1, [r3, #16]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff70 	bl	8000c86 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff81 	bl	8000cb6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffa9 	bl	8000d12 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffb6 	bl	8000d38 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <LL_RCC_HSI_IsReady>:
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <LL_RCC_HSI_IsReady+0x20>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_RCC_LSE_IsReady>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <LL_RCC_LSE_IsReady+0x20>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000

08000e20 <LL_RCC_GetSysClkSource>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <LL_RCC_GetSysClkSource+0x18>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <LL_RCC_GetAHBPrescaler>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <LL_RCC_GetAHBPrescaler+0x18>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <LL_RCC_GetAPB1Prescaler>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <LL_RCC_GetAPB2Prescaler>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <LL_RCC_GetAPB2Prescaler+0x18>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <LL_RCC_GetUSARTClockSource+0x28>)
 8000e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	061b      	lsls	r3, r3, #24
 8000eaa:	4313      	orrs	r3, r2
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000

08000ebc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <LL_RCC_PLL_GetMainSource+0x18>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <LL_RCC_PLL_GetPrediv+0x18>)
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	f003 030f 	and.w	r3, r3, #15
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000f18:	f000 f864 	bl	8000fe4 <RCC_GetSystemClockFreq>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f882 	bl	8001030 <RCC_GetHCLKClockFreq>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f890 	bl	800105c <RCC_GetPCLK1ClockFreq>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f89c 	bl	8001084 <RCC_GetPCLK2ClockFreq>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60da      	str	r2, [r3, #12]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d12d      	bne.n	8000fca <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff8e 	bl	8000e90 <LL_RCC_GetUSARTClockSource>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d00a      	beq.n	8000f90 <LL_RCC_GetUSARTClockFreq+0x34>
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d819      	bhi.n	8000fb2 <LL_RCC_GetUSARTClockFreq+0x56>
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d002      	beq.n	8000f88 <LL_RCC_GetUSARTClockFreq+0x2c>
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d00c      	beq.n	8000fa0 <LL_RCC_GetUSARTClockFreq+0x44>
 8000f86:	e014      	b.n	8000fb2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000f88:	f000 f82c 	bl	8000fe4 <RCC_GetSystemClockFreq>
 8000f8c:	60f8      	str	r0, [r7, #12]
        break;
 8000f8e:	e021      	b.n	8000fd4 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000f90:	f7ff ff22 	bl	8000dd8 <LL_RCC_HSI_IsReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d019      	beq.n	8000fce <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <LL_RCC_GetUSARTClockFreq+0x84>)
 8000f9c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000f9e:	e016      	b.n	8000fce <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000fa0:	f7ff ff2c 	bl	8000dfc <LL_RCC_LSE_IsReady>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d013      	beq.n	8000fd2 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8000faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fae:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000fb0:	e00f      	b.n	8000fd2 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000fb2:	f000 f817 	bl	8000fe4 <RCC_GetSystemClockFreq>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f839 	bl	8001030 <RCC_GetHCLKClockFreq>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f84b 	bl	800105c <RCC_GetPCLK1ClockFreq>
 8000fc6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8000fc8:	e004      	b.n	8000fd4 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8000fca:	bf00      	nop
 8000fcc:	e002      	b.n	8000fd4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8000fce:	bf00      	nop
 8000fd0:	e000      	b.n	8000fd4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8000fd2:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	007a1200 	.word	0x007a1200

08000fe4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000fee:	f7ff ff17 	bl	8000e20 <LL_RCC_GetSysClkSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d00c      	beq.n	8001012 <RCC_GetSystemClockFreq+0x2e>
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d80e      	bhi.n	800101a <RCC_GetSystemClockFreq+0x36>
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <RCC_GetSystemClockFreq+0x22>
 8001000:	2b04      	cmp	r3, #4
 8001002:	d003      	beq.n	800100c <RCC_GetSystemClockFreq+0x28>
 8001004:	e009      	b.n	800101a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <RCC_GetSystemClockFreq+0x48>)
 8001008:	607b      	str	r3, [r7, #4]
      break;
 800100a:	e009      	b.n	8001020 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <RCC_GetSystemClockFreq+0x48>)
 800100e:	607b      	str	r3, [r7, #4]
      break;
 8001010:	e006      	b.n	8001020 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001012:	f000 f84b 	bl	80010ac <RCC_PLL_GetFreqDomain_SYS>
 8001016:	6078      	str	r0, [r7, #4]
      break;
 8001018:	e002      	b.n	8001020 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <RCC_GetSystemClockFreq+0x48>)
 800101c:	607b      	str	r3, [r7, #4]
      break;
 800101e:	bf00      	nop
  }

  return frequency;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	007a1200 	.word	0x007a1200

08001030 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001038:	f7ff ff00 	bl	8000e3c <LL_RCC_GetAHBPrescaler>
 800103c:	4603      	mov	r3, r0
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <RCC_GetHCLKClockFreq+0x28>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	40d3      	lsrs	r3, r2
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	080013b0 	.word	0x080013b0

0800105c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001064:	f7ff fef8 	bl	8000e58 <LL_RCC_GetAPB1Prescaler>
 8001068:	4603      	mov	r3, r0
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <RCC_GetPCLK1ClockFreq+0x24>)
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	40d3      	lsrs	r3, r2
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	080013c0 	.word	0x080013c0

08001084 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800108c:	f7ff fef2 	bl	8000e74 <LL_RCC_GetAPB2Prescaler>
 8001090:	4603      	mov	r3, r0
 8001092:	0adb      	lsrs	r3, r3, #11
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001096:	5cd3      	ldrb	r3, [r2, r3]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	40d3      	lsrs	r3, r2
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	080013c0 	.word	0x080013c0

080010ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80010ba:	f7ff feff 	bl	8000ebc <LL_RCC_PLL_GetMainSource>
 80010be:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d003      	beq.n	80010d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80010ce:	e005      	b.n	80010dc <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80010d2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80010d4:	e005      	b.n	80010e2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80010d8:	60fb      	str	r3, [r7, #12]
      break;
 80010da:	e002      	b.n	80010e2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80010de:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80010e0:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80010e2:	f7ff ff07 	bl	8000ef4 <LL_RCC_PLL_GetPrediv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	3301      	adds	r3, #1
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	fbb2 f4f3 	udiv	r4, r2, r3
 80010f0:	f7ff fef2 	bl	8000ed8 <LL_RCC_PLL_GetMultiplicator>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010fa:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80010fe:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	603a      	str	r2, [r7, #0]
  return result;
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	40d3      	lsrs	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	003d0900 	.word	0x003d0900
 8001124:	007a1200 	.word	0x007a1200

08001128 <LL_USART_IsEnabled>:
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <LL_USART_IsEnabled+0x18>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <LL_USART_IsEnabled+0x1a>
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_USART_SetStopBitsLength>:
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_USART_SetHWFlowCtrl>:
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_USART_SetBaudRate>:
{
 800119a:	b480      	push	{r7}
 800119c:	b087      	sub	sp, #28
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ae:	d11a      	bne.n	80011e6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	005a      	lsls	r2, r3, #1
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	085b      	lsrs	r3, r3, #1
 80011b8:	441a      	add	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	085b      	lsrs	r3, r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	60da      	str	r2, [r3, #12]
}
 80011e4:	e00a      	b.n	80011fc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	085a      	lsrs	r2, r3, #1
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	441a      	add	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	60da      	str	r2, [r3, #12]
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff84 	bl	8001128 <LL_USART_IsEnabled>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d14e      	bne.n	80012c4 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <LL_USART_Init+0xc8>)
 800122c:	4013      	ands	r3, r2
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6851      	ldr	r1, [r2, #4]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	68d2      	ldr	r2, [r2, #12]
 8001236:	4311      	orrs	r1, r2
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	6912      	ldr	r2, [r2, #16]
 800123c:	4311      	orrs	r1, r2
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	6992      	ldr	r2, [r2, #24]
 8001242:	430a      	orrs	r2, r1
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4619      	mov	r1, r3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff7c 	bl	800114e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff89 	bl	8001174 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <LL_USART_Init+0xcc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d104      	bne.n	8001274 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fe76 	bl	8000f5c <LL_RCC_GetUSARTClockFreq>
 8001270:	61b8      	str	r0, [r7, #24]
 8001272:	e016      	b.n	80012a2 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <LL_USART_Init+0xd0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d107      	bne.n	800128c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe45 	bl	8000f10 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	e00a      	b.n	80012a2 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a13      	ldr	r2, [pc, #76]	; (80012dc <LL_USART_Init+0xd4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d106      	bne.n	80012a2 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe39 	bl	8000f10 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00d      	beq.n	80012c4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d009      	beq.n	80012c4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80012b0:	2300      	movs	r3, #0
 80012b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff6b 	bl	800119a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	efff69f3 	.word	0xefff69f3
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40004400 	.word	0x40004400
 80012dc:	40004800 	.word	0x40004800

080012e0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <LL_InitTick+0x30>)
 80012f4:	3b01      	subs	r3, #1
 80012f6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <LL_InitTick+0x30>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <LL_InitTick+0x30>)
 8001300:	2205      	movs	r2, #5
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e010 	.word	0xe000e010

08001314 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800131c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffdd 	bl	80012e0 <LL_InitTick>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <LL_SetSystemCoreClock+0x1c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000000 	.word	0x20000000

08001350 <__libc_init_array>:
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	4d0d      	ldr	r5, [pc, #52]	; (8001388 <__libc_init_array+0x38>)
 8001354:	4c0d      	ldr	r4, [pc, #52]	; (800138c <__libc_init_array+0x3c>)
 8001356:	1b64      	subs	r4, r4, r5
 8001358:	10a4      	asrs	r4, r4, #2
 800135a:	2600      	movs	r6, #0
 800135c:	42a6      	cmp	r6, r4
 800135e:	d109      	bne.n	8001374 <__libc_init_array+0x24>
 8001360:	4d0b      	ldr	r5, [pc, #44]	; (8001390 <__libc_init_array+0x40>)
 8001362:	4c0c      	ldr	r4, [pc, #48]	; (8001394 <__libc_init_array+0x44>)
 8001364:	f000 f818 	bl	8001398 <_init>
 8001368:	1b64      	subs	r4, r4, r5
 800136a:	10a4      	asrs	r4, r4, #2
 800136c:	2600      	movs	r6, #0
 800136e:	42a6      	cmp	r6, r4
 8001370:	d105      	bne.n	800137e <__libc_init_array+0x2e>
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	f855 3b04 	ldr.w	r3, [r5], #4
 8001378:	4798      	blx	r3
 800137a:	3601      	adds	r6, #1
 800137c:	e7ee      	b.n	800135c <__libc_init_array+0xc>
 800137e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001382:	4798      	blx	r3
 8001384:	3601      	adds	r6, #1
 8001386:	e7f2      	b.n	800136e <__libc_init_array+0x1e>
 8001388:	080013c8 	.word	0x080013c8
 800138c:	080013c8 	.word	0x080013c8
 8001390:	080013c8 	.word	0x080013c8
 8001394:	080013cc 	.word	0x080013cc

08001398 <_init>:
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	bf00      	nop
 800139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139e:	bc08      	pop	{r3}
 80013a0:	469e      	mov	lr, r3
 80013a2:	4770      	bx	lr

080013a4 <_fini>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	bf00      	nop
 80013a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013aa:	bc08      	pop	{r3}
 80013ac:	469e      	mov	lr, r3
 80013ae:	4770      	bx	lr
